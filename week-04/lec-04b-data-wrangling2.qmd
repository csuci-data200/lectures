---
title: "Data 200: Lecture 4b"
subtitle: "Data Wrangling Part 2: Aggregating and Joining Data"
author: "Professor Catalina Medina"
execute:
  echo: true
format: 
  revealjs:
    theme: [sky, ../slide-style.scss]
    slide-number: true
---



```{r}
#| echo: false
library(tidyverse)
library(janitor)
options(scipen = 999)
```


```{r}
#| echo: false
lapd <- 
  read_csv(here::here("data/Police_Payroll.csv")) |> 
  janitor::clean_names() |> 
  filter(year == 2018) |> 
  select(
    job_class_title,
    employment_type,
    base_pay) |>
  mutate(
    employment_type = as.factor(employment_type),
    job_class_title = as.factor(job_class_title),
    base_pay_level = case_when(
      base_pay < 0 ~ "Less than 0", 
      base_pay == 0 ~ "No Income",
      base_pay < 100000 & base_pay > 0 ~ "Between 0 and 100K",
      base_pay > 100000 ~ "Greater than 100K"
    )
  ) 


artists <- readxl::read_xlsx("../data/spotify.xlsx", sheet = "artist")
songs <- readxl::read_xlsx("../data/spotify.xlsx", sheet = "top_song")
albums <- readxl::read_xlsx("../data/spotify.xlsx", sheet = "album") |> 
  mutate(album_release_date = lubridate::ymd(album_release_date))
```

## Data

```{r}
glimpse(lapd)
```


# Specifying levels of a factor

## `base_pay_level` variable

Recall last lecture we we created the `base_pay_level` variable.
```{r}
lapd <- lapd |> 
  mutate(
    base_pay_level = case_when(
      base_pay < 0 ~ "Less than 0", 
      base_pay == 0 ~ "No Income",
      base_pay < 100000 & base_pay > 0 ~ "Between 0 and 100K",
      base_pay > 100000 ~ "Greater than 100K"
    )
  )

glimpse(lapd)
```


## Specifying variable as a factor

This is an ordinal variable, so we should specify that ordering by making it a factor variable.

```{r}
lapd <- lapd |> 
  mutate(base_pay_level = as.factor(base_pay_level))

glimpse(lapd)

lapd |> 
  pull(base_pay_level) |> 
  levels()
```

By default it will order alphabetically.

## Specifying variable as factor with specified order of levels

We can't specify levels with `as.factor()`. Instead we use `factor()`.

```{r}
lapd |> 
  mutate(base_pay_level = factor(
    base_pay_level,
    levels = c("Less than 0", "No Income", "Between 0 and 100K", "Greater than 100K")
  )) |> 
  pull(base_pay_level) |> 
  levels()
```

Now it has the ordering we specified.


## Specifying variable as factor levels and labels

We can even rename the factor's `levels` using `labels`.

```{r}
lapd |> 
  mutate(base_pay_level = factor(
    base_pay_level,
    levels = c("Less than 0", "No Income", "Between 0 and 100K", "Greater than 100K"),
    labels = c("Negative", "Zero", "Positive Under 100K", "Positive over 100K")
  )) |> 
  pull(base_pay_level) |> 
  levels()
```

The order of the `levels` must match the order of the `labels`.

# Review of Aggregating Data


##

::::{.columns}
:::{.column width="50%"}
### Data
Observations
:::

:::{.column width="50%"}
### Aggregate Data
Summaries of observations
:::
::::

## Aggregating Categorical Data

Categorical data are summarized with **counts** or **proportions**.

##


```{r}
lapd |> 
  count(employment_type)
```

. . .

```{r}
lapd |> 
  count(employment_type) |> 
  mutate(prop = n / sum(n))
```

## Aggregating Numerical Data

Mean, median, standard deviation, variance, and quartiles are some of the numerical summaries of numerical variables. Recall


```{r}
summarize(
  lapd, 
  mean_base_pay = mean(base_pay),
  sd_base_pay = sd(base_pay)
)
```

# Aggregating Data By Groups

## `group_by()`

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("img/group-by.jpeg")
```

`group_by()` separates the data frame by the groups. Any action following `group_by()` will be completed for each group separately.

##

Q. What is the median salary for each employment type?

## 

```{r}
lapd |> 
  group_by(employment_type)
```

##

Note that when `group_by()` is used there have been no changes to the number of columns or rows. 
The only difference we can observe is now `Groups: employment_type[3]` is displayed indicating the data frame (i.e., tibble) is divided into three groups.

##

```{r}
lapd |> 
  group_by(employment_type) |> 
  summarize(med_base_pay = median(base_pay))
```

##

We can also remind ourselves how many staff members there were in each group.

```{r}
lapd |> 
  group_by(employment_type) |> 
  summarize(
    med_base_pay = median(base_pay),
    count = n()
  )
```

Note that `n()` does not take any arguments.



# Data Joins

## `left_join(x, y)`

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("img/left-join.png")
```

## `right_join(x, y)`


```{r}
#| echo: false
#| fig-align: center
#| out-width: 45% 
knitr::include_graphics("img/right-join.png")
```

## `full_join(x, y)`


```{r}
#| echo: false
#| fig-align: center
#| out-width: 45% 
knitr::include_graphics("img/full-join.png")
```

## `inner_join(x, y)` & `semi_join(x, y)`

```{r}
#| echo: false
#| fig-align: center
#| out-width: 45% 
knitr::include_graphics("img/inner-semi-join.png")
```

## `anti_join(x, y)`

```{r}
#| echo: false
#| fig-align: center
#| out-width: 45% 
knitr::include_graphics("img/anti-join.png")
```

## `something_join(x, y)`


<table>
<thead>
  <tr>
    <th></th>
    <th colspan="2" style="text-align: center">x</th>
    <th colspan="2" style="text-align: center">y</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td></td>
    <td>rows</td>
    <td>columns</td>
    <td>rows</td>
    <td>columns</td>
  </tr>
  <tr>
    <td>`left_join()`</td>
    <td>all</td>
    <td>all</td>
    <td>matched</td>
    <td>all</td>
  </tr>
  <tr>
    <td>`right_join()`</td>
    <td>matched</td>
    <td>all</td>
    <td>all</td>
    <td>all</td>
  </tr>
  <tr>
    <td>`full_join()`</td>
    <td>all</td>
    <td>all</td>
    <td>all</td>
    <td>all</td>
  </tr>
  <tr>
    <td>`inner_join()`</td>
    <td>matched</td>
    <td>all</td>
    <td>matched</td>
    <td>all</td>
  </tr>
  <tr>
    <td>`semi_join()`</td>
    <td>matched</td>
    <td>all</td>
    <td>none</td>
    <td>none</td>
  </tr>
  <tr>
    <td>`anti_join()`</td>
    <td>unmatched</td>
    <td>all</td>
    <td>none</td>
    <td>none</td>
  </tr>
</tbody>
</table>

## 

::: {.panel-tabset}

## artists

```{r}
artists
```

## songs

```{r}
songs
```

## albums

```{r}
albums
```



:::
##

```{r}
#| echo: false
#| fig-align: center
knitr::include_graphics("img/data_joins_spotify.png")
```

## 

```{r}
left_join(songs, artists)
```

## 

```{r}
right_join(songs, artists)
```


##

```{r}
full_join(songs, artists, by = "name")
```

##

```{r}
full_join(songs, artists, by = "name") |> 
  full_join(albums, by = "album_name")
```


# Lab time!

## Learning Tip of the Day

[Reappraising test anxiety increases academic performance of first-year college students](https://psycnet.apa.org/record/2017-57283-001)